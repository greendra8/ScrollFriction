diff --git a/build.mjs b/build.mjs
new file mode 100755
index 0000000000000000000000000000000000000000..d0cdd0614a970805cd815d0e9a8a6525d2d54771
--- /dev/null
+++ b/build.mjs
@@ -0,0 +1,67 @@
+#!/usr/bin/env node
+
+import { promises as fs } from 'fs';
+import { spawn } from 'child_process';
+import path from 'path';
+import url from 'url';
+
+const __dirname = path.dirname(url.fileURLToPath(import.meta.url));
+const repoRoot = __dirname;
+const extensionDir = path.join(repoRoot, 'extension');
+const distDir = path.join(repoRoot, 'dist');
+const buildDir = path.join(distDir, 'scroll-resistance-trainer');
+const zipPath = path.join(distDir, 'scroll-resistance-trainer.zip');
+
+async function ensureCleanDist() {
+  await fs.rm(distDir, { recursive: true, force: true });
+  await fs.mkdir(buildDir, { recursive: true });
+}
+
+async function copyDirectory(src, dest) {
+  await fs.mkdir(dest, { recursive: true });
+  const entries = await fs.readdir(src, { withFileTypes: true });
+  await Promise.all(
+    entries.map(async (entry) => {
+      const srcPath = path.join(src, entry.name);
+      const destPath = path.join(dest, entry.name);
+      if (entry.isDirectory()) {
+        await copyDirectory(srcPath, destPath);
+      } else if (entry.isFile()) {
+        await fs.copyFile(srcPath, destPath);
+      }
+    })
+  );
+}
+
+async function zipBuildDirectory() {
+  return new Promise((resolve, reject) => {
+    const zipArgs = ['-r', '-q', zipPath, '.'];
+    const child = spawn('zip', zipArgs, { cwd: buildDir, stdio: 'inherit' });
+
+    child.on('error', (error) => {
+      reject(error);
+    });
+
+    child.on('close', (code) => {
+      if (code === 0) {
+        resolve();
+      } else {
+        reject(new Error(`zip command exited with code ${code}`));
+      }
+    });
+  });
+}
+
+async function main() {
+  try {
+    await ensureCleanDist();
+    await copyDirectory(extensionDir, buildDir);
+    await zipBuildDirectory();
+    console.log(`Extension packaged at ${zipPath}`);
+  } catch (error) {
+    console.error('Failed to build extension:', error);
+    process.exitCode = 1;
+  }
+}
+
+await main();
diff --git a/dist/scroll-resistance-trainer.zip b/dist/scroll-resistance-trainer.zip
new file mode 100644
index 0000000000000000000000000000000000000000..25e23a30c4dc8cd8511ec46f6fb871b9959d8eb1
GIT binary patch
literal 8583
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

literal 0
HcmV?d00001

diff --git a/dist/scroll-resistance-trainer/background.js b/dist/scroll-resistance-trainer/background.js
new file mode 100644
index 0000000000000000000000000000000000000000..c3f749fbc82ca5e83f3553cda55719634898195e
--- /dev/null
+++ b/dist/scroll-resistance-trainer/background.js
@@ -0,0 +1,66 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+function ensureDefaults() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to read storage', chrome.runtime.lastError);
+      return;
+    }
+
+    const updates = {};
+
+    if (items.mode !== 'whitelist' && items.mode !== 'blacklist') {
+      updates.mode = DEFAULT_SETTINGS.mode;
+    }
+
+    if (!Array.isArray(items.whitelist)) {
+      updates.whitelist = DEFAULT_SETTINGS.whitelist;
+    }
+
+    if (!Array.isArray(items.blacklist)) {
+      updates.blacklist = DEFAULT_SETTINGS.blacklist;
+    }
+
+    const storedResistance = items.resistance || {};
+    let baseMultiplier = Number.isFinite(storedResistance.baseMultiplier) && storedResistance.baseMultiplier >= 1
+      ? storedResistance.baseMultiplier
+      : DEFAULT_SETTINGS.resistance.baseMultiplier;
+    let maxMultiplier = Number.isFinite(storedResistance.maxMultiplier) && storedResistance.maxMultiplier >= 1
+      ? storedResistance.maxMultiplier
+      : DEFAULT_SETTINGS.resistance.maxMultiplier;
+    const metersToMax = Number.isFinite(storedResistance.metersToMax) && storedResistance.metersToMax > 0
+      ? storedResistance.metersToMax
+      : DEFAULT_SETTINGS.resistance.metersToMax;
+
+    if (maxMultiplier < baseMultiplier) {
+      maxMultiplier = baseMultiplier;
+    }
+
+    const mergedResistance = { baseMultiplier, maxMultiplier, metersToMax };
+
+    if (JSON.stringify(storedResistance) !== JSON.stringify(mergedResistance)) {
+      updates.resistance = mergedResistance;
+    }
+
+    if (Object.keys(updates).length > 0) {
+      chrome.storage.sync.set(updates);
+    }
+  });
+}
+
+chrome.runtime.onInstalled.addListener(() => {
+  ensureDefaults();
+});
+
+chrome.runtime.onStartup.addListener(() => {
+  ensureDefaults();
+});
diff --git a/dist/scroll-resistance-trainer/content.js b/dist/scroll-resistance-trainer/content.js
new file mode 100644
index 0000000000000000000000000000000000000000..8d6015fba2da521646948718b90292720895cb0c
--- /dev/null
+++ b/dist/scroll-resistance-trainer/content.js
@@ -0,0 +1,153 @@
+const PIXELS_PER_METER = 3779.5275590551;
+
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+let settings = { ...DEFAULT_SETTINGS };
+let enabled = false;
+
+function cloneSettings(value) {
+  return JSON.parse(JSON.stringify(value));
+}
+
+function getHostname() {
+  return window.location.hostname.toLowerCase();
+}
+
+function isHostInList(host, list) {
+  return Array.isArray(list) && list.some((entry) => entry === host);
+}
+
+function determineEnabled() {
+  const host = getHostname();
+  if (settings.mode === 'whitelist') {
+    return !isHostInList(host, settings.whitelist);
+  }
+  return isHostInList(host, settings.blacklist);
+}
+
+function sanitizeResistanceConfig(raw = {}) {
+  const baseMultiplier = Number.isFinite(raw.baseMultiplier) && raw.baseMultiplier >= 1
+    ? raw.baseMultiplier
+    : DEFAULT_SETTINGS.resistance.baseMultiplier;
+  let maxMultiplier = Number.isFinite(raw.maxMultiplier) && raw.maxMultiplier >= 1
+    ? raw.maxMultiplier
+    : DEFAULT_SETTINGS.resistance.maxMultiplier;
+  const metersToMax = Number.isFinite(raw.metersToMax) && raw.metersToMax > 0
+    ? raw.metersToMax
+    : DEFAULT_SETTINGS.resistance.metersToMax;
+
+  if (maxMultiplier < baseMultiplier) {
+    maxMultiplier = baseMultiplier;
+  }
+
+  return { baseMultiplier, maxMultiplier, metersToMax };
+}
+
+function getScrollTop() {
+  if (typeof window.scrollY === 'number') {
+    return window.scrollY;
+  }
+
+  const doc = document.documentElement;
+  const body = document.body;
+  return Math.max(doc ? doc.scrollTop : 0, body ? body.scrollTop : 0);
+}
+
+function getDownwardMultiplier(scrollTop) {
+  const { baseMultiplier, maxMultiplier, metersToMax } = settings.resistance;
+  const pixelsToMax = metersToMax * PIXELS_PER_METER;
+
+  if (pixelsToMax <= 0) {
+    return Math.max(1, maxMultiplier);
+  }
+
+  const progress = Math.min(1, Math.max(0, scrollTop / pixelsToMax));
+  const range = Math.max(0, maxMultiplier - baseMultiplier);
+  const multiplier = baseMultiplier + progress * range;
+
+  return Math.max(1, Math.min(maxMultiplier, multiplier));
+}
+
+function applySettings(newSettings) {
+  settings = {
+    mode: newSettings.mode === 'blacklist' ? 'blacklist' : DEFAULT_SETTINGS.mode,
+    whitelist: Array.isArray(newSettings.whitelist)
+      ? cloneSettings(newSettings.whitelist)
+      : cloneSettings(DEFAULT_SETTINGS.whitelist),
+    blacklist: Array.isArray(newSettings.blacklist)
+      ? cloneSettings(newSettings.blacklist)
+      : cloneSettings(DEFAULT_SETTINGS.blacklist),
+    resistance: sanitizeResistanceConfig(newSettings.resistance)
+  };
+
+  enabled = determineEnabled();
+}
+
+function handleWheel(event) {
+  if (!enabled) {
+    return;
+  }
+
+  if (event.defaultPrevented || event.ctrlKey || event.metaKey) {
+    return;
+  }
+
+  const scrollTop = getScrollTop();
+  const downwardMultiplier = getDownwardMultiplier(scrollTop);
+  const isScrollingDown = event.deltaY > 0;
+  const effectiveVerticalMultiplier = isScrollingDown ? downwardMultiplier : 1;
+
+  const adjustedDeltaX = event.deltaX;
+  const adjustedDeltaY = event.deltaY / effectiveVerticalMultiplier;
+
+  event.preventDefault();
+  window.scrollBy({ left: adjustedDeltaX, top: adjustedDeltaY, behavior: 'auto' });
+}
+
+function init() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Scroll Resistance: failed to read settings', chrome.runtime.lastError);
+      return;
+    }
+    applySettings(items);
+  });
+
+  chrome.storage.onChanged.addListener((changes, areaName) => {
+    if (areaName !== 'sync') {
+      return;
+    }
+
+    const updated = { ...settings };
+    if (Object.prototype.hasOwnProperty.call(changes, 'mode')) {
+      updated.mode = changes.mode.newValue;
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'whitelist')) {
+      updated.whitelist = Array.isArray(changes.whitelist.newValue)
+        ? cloneSettings(changes.whitelist.newValue)
+        : cloneSettings(DEFAULT_SETTINGS.whitelist);
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'blacklist')) {
+      updated.blacklist = Array.isArray(changes.blacklist.newValue)
+        ? cloneSettings(changes.blacklist.newValue)
+        : cloneSettings(DEFAULT_SETTINGS.blacklist);
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'resistance')) {
+      updated.resistance = sanitizeResistanceConfig(changes.resistance.newValue);
+    }
+    applySettings(updated);
+  });
+
+  window.addEventListener('wheel', handleWheel, { passive: false });
+}
+
+init();
diff --git a/dist/scroll-resistance-trainer/manifest.json b/dist/scroll-resistance-trainer/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..e2e351fc7adc5afc2b4b9916f7a90f87bebd189f
--- /dev/null
+++ b/dist/scroll-resistance-trainer/manifest.json
@@ -0,0 +1,28 @@
+{
+  "manifest_version": 3,
+  "name": "Scroll Resistance Trainer",
+  "version": "0.1.0",
+  "description": "Increase scroll resistance the longer you stay on distracting sites.",
+  "permissions": [
+    "storage",
+    "tabs"
+  ],
+  "host_permissions": [
+    "<all_urls>"
+  ],
+  "background": {
+    "service_worker": "background.js"
+  },
+  "action": {
+    "default_title": "Scroll Resistance Trainer",
+    "default_popup": "popup.html"
+  },
+  "options_page": "options.html",
+  "content_scripts": [
+    {
+      "matches": ["<all_urls>"],
+      "js": ["content.js"],
+      "run_at": "document_start"
+    }
+  ]
+}
diff --git a/dist/scroll-resistance-trainer/options.css b/dist/scroll-resistance-trainer/options.css
new file mode 100644
index 0000000000000000000000000000000000000000..73ec360f43b5384d955ae0f1ac14025c55e7d9d1
--- /dev/null
+++ b/dist/scroll-resistance-trainer/options.css
@@ -0,0 +1,127 @@
+body {
+  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
+  background: #0d1018;
+  color: #f5f7ff;
+  margin: 0;
+  padding: 2rem;
+}
+
+main {
+  max-width: 640px;
+  margin: 0 auto;
+  display: flex;
+  flex-direction: column;
+  gap: 2rem;
+}
+
+h1 {
+  margin: 0;
+  font-size: 1.8rem;
+}
+
+h2 {
+  font-size: 1.2rem;
+  margin-bottom: 0.75rem;
+}
+
+section {
+  background: rgba(23, 30, 46, 0.9);
+  padding: 1.5rem;
+  border-radius: 12px;
+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
+}
+
+label {
+  display: block;
+  margin-bottom: 0.5rem;
+  line-height: 1.4;
+}
+
+input[type='text'],
+input[type='number'] {
+  width: 100%;
+  margin-top: 0.35rem;
+  padding: 0.5rem;
+  border-radius: 6px;
+  border: 1px solid rgba(255, 255, 255, 0.1);
+  background: rgba(10, 14, 22, 0.8);
+  color: inherit;
+}
+
+form {
+  display: flex;
+  gap: 0.5rem;
+  margin-bottom: 1rem;
+}
+
+form button,
+button {
+  background: #2b8a3e;
+  color: #fff;
+  border: none;
+  border-radius: 6px;
+  padding: 0.6rem 1rem;
+  cursor: pointer;
+  transition: background 0.2s ease;
+}
+
+button.secondary {
+  background: #22304a;
+}
+
+button:hover {
+  background: #237233;
+}
+
+button.secondary:hover {
+  background: #1a2638;
+}
+
+.site-list {
+  list-style: none;
+  padding: 0;
+  margin: 0;
+  display: flex;
+  flex-direction: column;
+  gap: 0.5rem;
+}
+
+.site-list li {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  background: rgba(12, 16, 26, 0.8);
+  padding: 0.6rem 0.75rem;
+  border-radius: 6px;
+}
+
+.site-list li.empty {
+  justify-content: center;
+  color: rgba(245, 247, 255, 0.6);
+}
+
+.site-list button {
+  background: #b91c1c;
+}
+
+.site-list button:hover {
+  background: #991b1b;
+}
+
+.resistance-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  gap: 1rem;
+}
+
+.resistance-actions {
+  display: flex;
+  gap: 0.75rem;
+  margin-top: 1rem;
+}
+
+.status {
+  margin-top: 0.75rem;
+  min-height: 1.25rem;
+  color: #8fd19e;
+}
diff --git a/dist/scroll-resistance-trainer/options.html b/dist/scroll-resistance-trainer/options.html
new file mode 100644
index 0000000000000000000000000000000000000000..80edb0a82c593d2858752c6b7ab2d4c112723b37
--- /dev/null
+++ b/dist/scroll-resistance-trainer/options.html
@@ -0,0 +1,66 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Scroll Resistance Settings</title>
+    <link rel="stylesheet" href="options.css" />
+  </head>
+  <body>
+    <main>
+      <h1>Scroll Resistance</h1>
+      <section>
+        <h2>Mode</h2>
+        <label>
+          <input type="radio" name="mode" value="whitelist" />
+          Whitelist mode (resistance everywhere except allowed sites)
+        </label>
+        <label>
+          <input type="radio" name="mode" value="blacklist" />
+          Blacklist mode (resistance only on selected sites)
+        </label>
+      </section>
+
+      <section>
+        <h2>Whitelist</h2>
+        <form id="whitelist-form">
+          <input type="text" id="whitelist-input" placeholder="example.com" />
+          <button type="submit">Add</button>
+        </form>
+        <ul id="whitelist-list" class="site-list"></ul>
+      </section>
+
+      <section>
+        <h2>Blacklist</h2>
+        <form id="blacklist-form">
+          <input type="text" id="blacklist-input" placeholder="example.com" />
+          <button type="submit">Add</button>
+        </form>
+        <ul id="blacklist-list" class="site-list"></ul>
+      </section>
+
+      <section>
+        <h2>Resistance settings</h2>
+        <div class="resistance-grid">
+          <label>
+            Starting resistance multiplier
+            <input type="number" id="base-multiplier" step="0.1" min="1" />
+          </label>
+          <label>
+            Maximum resistance multiplier
+            <input type="number" id="max-multiplier" step="0.5" min="1" />
+          </label>
+          <label>
+            Distance to max resistance (meters)
+            <input type="number" id="meters-to-max" step="0.5" min="0.1" />
+          </label>
+        </div>
+        <div class="resistance-actions">
+          <button id="save-resistance">Save resistance</button>
+          <button id="reset-resistance" class="secondary">Reset defaults</button>
+        </div>
+        <p id="resistance-status" class="status"></p>
+      </section>
+    </main>
+    <script src="options.js" defer></script>
+  </body>
+</html>
diff --git a/dist/scroll-resistance-trainer/options.js b/dist/scroll-resistance-trainer/options.js
new file mode 100644
index 0000000000000000000000000000000000000000..56c827794131207a668f61eaaf07e439cc983730
--- /dev/null
+++ b/dist/scroll-resistance-trainer/options.js
@@ -0,0 +1,204 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+const modeInputs = document.querySelectorAll('input[name="mode"]');
+const whitelistForm = document.getElementById('whitelist-form');
+const whitelistInput = document.getElementById('whitelist-input');
+const whitelistList = document.getElementById('whitelist-list');
+const blacklistForm = document.getElementById('blacklist-form');
+const blacklistInput = document.getElementById('blacklist-input');
+const blacklistList = document.getElementById('blacklist-list');
+const baseMultiplierInput = document.getElementById('base-multiplier');
+const maxMultiplierInput = document.getElementById('max-multiplier');
+const metersToMaxInput = document.getElementById('meters-to-max');
+const saveResistanceButton = document.getElementById('save-resistance');
+const resetResistanceButton = document.getElementById('reset-resistance');
+const resistanceStatus = document.getElementById('resistance-status');
+
+let currentSettings = cloneDefaults(DEFAULT_SETTINGS);
+
+function cloneDefaults(value) {
+  return JSON.parse(JSON.stringify(value));
+}
+
+function normalizeHost(value) {
+  if (!value) {
+    return null;
+  }
+
+  let host = value.trim().toLowerCase();
+  if (!host) {
+    return null;
+  }
+
+  if (!host.includes('://')) {
+    host = `https://${host}`;
+  }
+
+  try {
+    return new URL(host).hostname;
+  } catch (error) {
+    return null;
+  }
+}
+
+function renderMode() {
+  modeInputs.forEach((input) => {
+    input.checked = input.value === currentSettings.mode;
+  });
+}
+
+function renderList(listElement, sites, type) {
+  listElement.textContent = '';
+  if (!Array.isArray(sites) || sites.length === 0) {
+    const empty = document.createElement('li');
+    empty.className = 'empty';
+    empty.textContent = 'No sites yet.';
+    listElement.appendChild(empty);
+    return;
+  }
+
+  sites
+    .slice()
+    .sort((a, b) => a.localeCompare(b))
+    .forEach((host) => {
+      const li = document.createElement('li');
+      li.textContent = host;
+      const button = document.createElement('button');
+      button.type = 'button';
+      button.textContent = 'Remove';
+      button.addEventListener('click', () => removeHost(type, host));
+      li.appendChild(button);
+      listElement.appendChild(li);
+    });
+}
+
+function renderResistance() {
+  const { baseMultiplier, maxMultiplier, metersToMax } = currentSettings.resistance;
+  baseMultiplierInput.value = baseMultiplier;
+  maxMultiplierInput.value = maxMultiplier;
+  metersToMaxInput.value = metersToMax;
+}
+
+function saveSettings(partial) {
+  chrome.storage.sync.set(partial, () => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to save settings', chrome.runtime.lastError);
+    }
+  });
+}
+
+function removeHost(type, host) {
+  const list = currentSettings[type];
+  const index = list.indexOf(host);
+  if (index >= 0) {
+    list.splice(index, 1);
+    renderList(type === 'whitelist' ? whitelistList : blacklistList, list, type);
+    saveSettings({ [type]: list });
+  }
+}
+
+function handleListSubmit(event, type) {
+  event.preventDefault();
+  const input = type === 'whitelist' ? whitelistInput : blacklistInput;
+  const host = normalizeHost(input.value);
+  if (!host) {
+    input.value = '';
+    return;
+  }
+
+  const list = currentSettings[type];
+  if (!list.includes(host)) {
+    list.push(host);
+    renderList(type === 'whitelist' ? whitelistList : blacklistList, list, type);
+    saveSettings({ [type]: list });
+  }
+
+  input.value = '';
+}
+
+function handleModeChange(event) {
+  const { value } = event.target;
+  if (value === 'whitelist' || value === 'blacklist') {
+    currentSettings.mode = value;
+    saveSettings({ mode: value });
+  }
+}
+
+function handleSaveResistance() {
+  const base = Number.parseFloat(baseMultiplierInput.value);
+  const max = Number.parseFloat(maxMultiplierInput.value);
+  const metersToMax = Number.parseFloat(metersToMaxInput.value);
+
+  const resistance = {
+    baseMultiplier: Number.isFinite(base) && base >= 1 ? base : DEFAULT_SETTINGS.resistance.baseMultiplier,
+    maxMultiplier: Number.isFinite(max) && max >= 1 ? max : DEFAULT_SETTINGS.resistance.maxMultiplier,
+    metersToMax:
+      Number.isFinite(metersToMax) && metersToMax > 0 ? metersToMax : DEFAULT_SETTINGS.resistance.metersToMax
+  };
+
+  if (resistance.maxMultiplier < resistance.baseMultiplier) {
+    resistance.maxMultiplier = resistance.baseMultiplier;
+  }
+
+  currentSettings.resistance = resistance;
+  saveSettings({ resistance });
+  resistanceStatus.textContent = 'Resistance settings saved.';
+  setTimeout(() => {
+    resistanceStatus.textContent = '';
+  }, 2000);
+}
+
+function handleResetResistance() {
+  currentSettings.resistance = cloneDefaults(DEFAULT_SETTINGS.resistance);
+  renderResistance();
+  saveSettings({ resistance: currentSettings.resistance });
+  resistanceStatus.textContent = 'Defaults restored.';
+  setTimeout(() => {
+    resistanceStatus.textContent = '';
+  }, 2000);
+}
+
+function hydrate() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to load settings', chrome.runtime.lastError);
+      return;
+    }
+
+    currentSettings = {
+      mode: items.mode ?? DEFAULT_SETTINGS.mode,
+      whitelist: Array.isArray(items.whitelist) ? items.whitelist.slice() : cloneDefaults(DEFAULT_SETTINGS.whitelist),
+      blacklist: Array.isArray(items.blacklist) ? items.blacklist.slice() : cloneDefaults(DEFAULT_SETTINGS.blacklist),
+      resistance: {
+        baseMultiplier: items.resistance?.baseMultiplier ?? DEFAULT_SETTINGS.resistance.baseMultiplier,
+        maxMultiplier: items.resistance?.maxMultiplier ?? DEFAULT_SETTINGS.resistance.maxMultiplier,
+        metersToMax: items.resistance?.metersToMax ?? DEFAULT_SETTINGS.resistance.metersToMax
+      }
+    };
+
+    renderMode();
+    renderList(whitelistList, currentSettings.whitelist, 'whitelist');
+    renderList(blacklistList, currentSettings.blacklist, 'blacklist');
+    renderResistance();
+  });
+}
+
+function init() {
+  hydrate();
+  whitelistForm.addEventListener('submit', (event) => handleListSubmit(event, 'whitelist'));
+  blacklistForm.addEventListener('submit', (event) => handleListSubmit(event, 'blacklist'));
+  modeInputs.forEach((input) => input.addEventListener('change', handleModeChange));
+  saveResistanceButton.addEventListener('click', handleSaveResistance);
+  resetResistanceButton.addEventListener('click', handleResetResistance);
+}
+
+document.addEventListener('DOMContentLoaded', init);
diff --git a/dist/scroll-resistance-trainer/popup.css b/dist/scroll-resistance-trainer/popup.css
new file mode 100644
index 0000000000000000000000000000000000000000..b2fce638ba622e4045fa11ae50c6a8e956ada915
--- /dev/null
+++ b/dist/scroll-resistance-trainer/popup.css
@@ -0,0 +1,73 @@
+body {
+  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
+  margin: 0;
+  padding: 0.75rem;
+  background: #10131a;
+  color: #f5f7ff;
+  min-width: 220px;
+}
+
+main {
+  display: flex;
+  flex-direction: column;
+  gap: 0.75rem;
+}
+
+button {
+  background: #2b8a3e;
+  color: #fff;
+  border: none;
+  border-radius: 6px;
+  padding: 0.5rem;
+  font-size: 0.95rem;
+  cursor: pointer;
+  transition: background 0.2s ease;
+}
+
+button:hover {
+  background: #237233;
+}
+
+button.secondary {
+  background: #22304a;
+}
+
+button.secondary:hover {
+  background: #1a2638;
+}
+
+.mode {
+  display: flex;
+  gap: 0.5rem;
+}
+
+.mode button {
+  flex: 1;
+}
+
+.mode button.active {
+  background: #0d6efd;
+}
+
+.status p {
+  margin: 0 0 0.5rem;
+  font-size: 0.9rem;
+}
+
+#toggle-site[disabled] {
+  opacity: 0.6;
+  cursor: default;
+}
+
+.actions {
+  display: flex;
+  justify-content: flex-end;
+}
+
+#open-settings {
+  background: #22304a;
+}
+
+#open-settings:hover {
+  background: #1a2638;
+}
diff --git a/dist/scroll-resistance-trainer/popup.html b/dist/scroll-resistance-trainer/popup.html
new file mode 100644
index 0000000000000000000000000000000000000000..104552a8bbe4a1f22572e41a7dd03387a2d5025f
--- /dev/null
+++ b/dist/scroll-resistance-trainer/popup.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Scroll Resistance</title>
+    <link rel="stylesheet" href="popup.css" />
+  </head>
+  <body>
+    <main>
+      <section class="mode">
+        <button id="whitelist-mode" data-mode="whitelist">Whitelist Mode</button>
+        <button id="blacklist-mode" data-mode="blacklist">Blacklist Mode</button>
+      </section>
+      <section class="status">
+        <p id="site-message">Loading...</p>
+        <button id="toggle-site" disabled>Add this site</button>
+      </section>
+      <section class="actions">
+        <button id="open-settings">Settings</button>
+      </section>
+    </main>
+    <script src="popup.js" defer></script>
+  </body>
+</html>
diff --git a/dist/scroll-resistance-trainer/popup.js b/dist/scroll-resistance-trainer/popup.js
new file mode 100644
index 0000000000000000000000000000000000000000..460859f3eac4b0b13f4fc19d28ed113419ed2f3c
--- /dev/null
+++ b/dist/scroll-resistance-trainer/popup.js
@@ -0,0 +1,135 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+const whitelistButton = document.getElementById('whitelist-mode');
+const blacklistButton = document.getElementById('blacklist-mode');
+const toggleSiteButton = document.getElementById('toggle-site');
+const siteMessage = document.getElementById('site-message');
+const settingsButton = document.getElementById('open-settings');
+
+let currentMode = DEFAULT_SETTINGS.mode;
+let whitelist = [...DEFAULT_SETTINGS.whitelist];
+let blacklist = [...DEFAULT_SETTINGS.blacklist];
+let currentHost = null;
+
+function normalizeHostFromUrl(url) {
+  try {
+    const { hostname } = new URL(url);
+    return hostname ? hostname.toLowerCase() : null;
+  } catch (error) {
+    return null;
+  }
+}
+
+function updateModeButtons() {
+  if (currentMode === 'whitelist') {
+    whitelistButton.classList.add('active');
+    blacklistButton.classList.remove('active');
+  } else {
+    blacklistButton.classList.add('active');
+    whitelistButton.classList.remove('active');
+  }
+}
+
+function updateSiteMessage() {
+  if (!currentHost) {
+    siteMessage.textContent = 'This page cannot be managed.';
+    toggleSiteButton.disabled = true;
+    return;
+  }
+
+  if (currentMode === 'whitelist') {
+    const isWhitelisted = whitelist.includes(currentHost);
+    siteMessage.textContent = isWhitelisted
+      ? `${currentHost} is whitelisted.`
+      : `${currentHost} will have resistance.`;
+    toggleSiteButton.textContent = isWhitelisted ? 'Already whitelisted' : 'Whitelist this site';
+    toggleSiteButton.disabled = isWhitelisted;
+  } else {
+    const isBlacklisted = blacklist.includes(currentHost);
+    siteMessage.textContent = isBlacklisted
+      ? `${currentHost} will face resistance.`
+      : `${currentHost} is unaffected.`;
+    toggleSiteButton.textContent = isBlacklisted ? 'Already blacklisted' : 'Blacklist this site';
+    toggleSiteButton.disabled = isBlacklisted;
+  }
+}
+
+function loadSettings() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to load settings', chrome.runtime.lastError);
+      siteMessage.textContent = 'Unable to load settings.';
+      return;
+    }
+
+    currentMode = items.mode ?? DEFAULT_SETTINGS.mode;
+    whitelist = Array.isArray(items.whitelist) ? items.whitelist : [...DEFAULT_SETTINGS.whitelist];
+    blacklist = Array.isArray(items.blacklist) ? items.blacklist : [...DEFAULT_SETTINGS.blacklist];
+
+    updateModeButtons();
+    updateSiteMessage();
+  });
+}
+
+function setMode(mode) {
+  if (mode === currentMode) {
+    return;
+  }
+
+  currentMode = mode;
+  updateModeButtons();
+  updateSiteMessage();
+  chrome.storage.sync.set({ mode });
+}
+
+function addCurrentSite() {
+  if (!currentHost) {
+    return;
+  }
+
+  if (currentMode === 'whitelist') {
+    if (!whitelist.includes(currentHost)) {
+      const updated = [...whitelist, currentHost];
+      whitelist = updated;
+      chrome.storage.sync.set({ whitelist: updated }, () => {
+        updateSiteMessage();
+      });
+    }
+  } else {
+    if (!blacklist.includes(currentHost)) {
+      const updated = [...blacklist, currentHost];
+      blacklist = updated;
+      chrome.storage.sync.set({ blacklist: updated }, () => {
+        updateSiteMessage();
+      });
+    }
+  }
+}
+
+function init() {
+  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
+    const [activeTab] = tabs;
+    if (activeTab && activeTab.url) {
+      currentHost = normalizeHostFromUrl(activeTab.url);
+    }
+    loadSettings();
+  });
+
+  whitelistButton.addEventListener('click', () => setMode('whitelist'));
+  blacklistButton.addEventListener('click', () => setMode('blacklist'));
+  toggleSiteButton.addEventListener('click', addCurrentSite);
+  settingsButton.addEventListener('click', () => {
+    chrome.runtime.openOptionsPage();
+  });
+}
+
+document.addEventListener('DOMContentLoaded', init);
diff --git a/extension/background.js b/extension/background.js
new file mode 100644
index 0000000000000000000000000000000000000000..c3f749fbc82ca5e83f3553cda55719634898195e
--- /dev/null
+++ b/extension/background.js
@@ -0,0 +1,66 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+function ensureDefaults() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to read storage', chrome.runtime.lastError);
+      return;
+    }
+
+    const updates = {};
+
+    if (items.mode !== 'whitelist' && items.mode !== 'blacklist') {
+      updates.mode = DEFAULT_SETTINGS.mode;
+    }
+
+    if (!Array.isArray(items.whitelist)) {
+      updates.whitelist = DEFAULT_SETTINGS.whitelist;
+    }
+
+    if (!Array.isArray(items.blacklist)) {
+      updates.blacklist = DEFAULT_SETTINGS.blacklist;
+    }
+
+    const storedResistance = items.resistance || {};
+    let baseMultiplier = Number.isFinite(storedResistance.baseMultiplier) && storedResistance.baseMultiplier >= 1
+      ? storedResistance.baseMultiplier
+      : DEFAULT_SETTINGS.resistance.baseMultiplier;
+    let maxMultiplier = Number.isFinite(storedResistance.maxMultiplier) && storedResistance.maxMultiplier >= 1
+      ? storedResistance.maxMultiplier
+      : DEFAULT_SETTINGS.resistance.maxMultiplier;
+    const metersToMax = Number.isFinite(storedResistance.metersToMax) && storedResistance.metersToMax > 0
+      ? storedResistance.metersToMax
+      : DEFAULT_SETTINGS.resistance.metersToMax;
+
+    if (maxMultiplier < baseMultiplier) {
+      maxMultiplier = baseMultiplier;
+    }
+
+    const mergedResistance = { baseMultiplier, maxMultiplier, metersToMax };
+
+    if (JSON.stringify(storedResistance) !== JSON.stringify(mergedResistance)) {
+      updates.resistance = mergedResistance;
+    }
+
+    if (Object.keys(updates).length > 0) {
+      chrome.storage.sync.set(updates);
+    }
+  });
+}
+
+chrome.runtime.onInstalled.addListener(() => {
+  ensureDefaults();
+});
+
+chrome.runtime.onStartup.addListener(() => {
+  ensureDefaults();
+});
diff --git a/extension/content.js b/extension/content.js
new file mode 100644
index 0000000000000000000000000000000000000000..8d6015fba2da521646948718b90292720895cb0c
--- /dev/null
+++ b/extension/content.js
@@ -0,0 +1,153 @@
+const PIXELS_PER_METER = 3779.5275590551;
+
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+let settings = { ...DEFAULT_SETTINGS };
+let enabled = false;
+
+function cloneSettings(value) {
+  return JSON.parse(JSON.stringify(value));
+}
+
+function getHostname() {
+  return window.location.hostname.toLowerCase();
+}
+
+function isHostInList(host, list) {
+  return Array.isArray(list) && list.some((entry) => entry === host);
+}
+
+function determineEnabled() {
+  const host = getHostname();
+  if (settings.mode === 'whitelist') {
+    return !isHostInList(host, settings.whitelist);
+  }
+  return isHostInList(host, settings.blacklist);
+}
+
+function sanitizeResistanceConfig(raw = {}) {
+  const baseMultiplier = Number.isFinite(raw.baseMultiplier) && raw.baseMultiplier >= 1
+    ? raw.baseMultiplier
+    : DEFAULT_SETTINGS.resistance.baseMultiplier;
+  let maxMultiplier = Number.isFinite(raw.maxMultiplier) && raw.maxMultiplier >= 1
+    ? raw.maxMultiplier
+    : DEFAULT_SETTINGS.resistance.maxMultiplier;
+  const metersToMax = Number.isFinite(raw.metersToMax) && raw.metersToMax > 0
+    ? raw.metersToMax
+    : DEFAULT_SETTINGS.resistance.metersToMax;
+
+  if (maxMultiplier < baseMultiplier) {
+    maxMultiplier = baseMultiplier;
+  }
+
+  return { baseMultiplier, maxMultiplier, metersToMax };
+}
+
+function getScrollTop() {
+  if (typeof window.scrollY === 'number') {
+    return window.scrollY;
+  }
+
+  const doc = document.documentElement;
+  const body = document.body;
+  return Math.max(doc ? doc.scrollTop : 0, body ? body.scrollTop : 0);
+}
+
+function getDownwardMultiplier(scrollTop) {
+  const { baseMultiplier, maxMultiplier, metersToMax } = settings.resistance;
+  const pixelsToMax = metersToMax * PIXELS_PER_METER;
+
+  if (pixelsToMax <= 0) {
+    return Math.max(1, maxMultiplier);
+  }
+
+  const progress = Math.min(1, Math.max(0, scrollTop / pixelsToMax));
+  const range = Math.max(0, maxMultiplier - baseMultiplier);
+  const multiplier = baseMultiplier + progress * range;
+
+  return Math.max(1, Math.min(maxMultiplier, multiplier));
+}
+
+function applySettings(newSettings) {
+  settings = {
+    mode: newSettings.mode === 'blacklist' ? 'blacklist' : DEFAULT_SETTINGS.mode,
+    whitelist: Array.isArray(newSettings.whitelist)
+      ? cloneSettings(newSettings.whitelist)
+      : cloneSettings(DEFAULT_SETTINGS.whitelist),
+    blacklist: Array.isArray(newSettings.blacklist)
+      ? cloneSettings(newSettings.blacklist)
+      : cloneSettings(DEFAULT_SETTINGS.blacklist),
+    resistance: sanitizeResistanceConfig(newSettings.resistance)
+  };
+
+  enabled = determineEnabled();
+}
+
+function handleWheel(event) {
+  if (!enabled) {
+    return;
+  }
+
+  if (event.defaultPrevented || event.ctrlKey || event.metaKey) {
+    return;
+  }
+
+  const scrollTop = getScrollTop();
+  const downwardMultiplier = getDownwardMultiplier(scrollTop);
+  const isScrollingDown = event.deltaY > 0;
+  const effectiveVerticalMultiplier = isScrollingDown ? downwardMultiplier : 1;
+
+  const adjustedDeltaX = event.deltaX;
+  const adjustedDeltaY = event.deltaY / effectiveVerticalMultiplier;
+
+  event.preventDefault();
+  window.scrollBy({ left: adjustedDeltaX, top: adjustedDeltaY, behavior: 'auto' });
+}
+
+function init() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Scroll Resistance: failed to read settings', chrome.runtime.lastError);
+      return;
+    }
+    applySettings(items);
+  });
+
+  chrome.storage.onChanged.addListener((changes, areaName) => {
+    if (areaName !== 'sync') {
+      return;
+    }
+
+    const updated = { ...settings };
+    if (Object.prototype.hasOwnProperty.call(changes, 'mode')) {
+      updated.mode = changes.mode.newValue;
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'whitelist')) {
+      updated.whitelist = Array.isArray(changes.whitelist.newValue)
+        ? cloneSettings(changes.whitelist.newValue)
+        : cloneSettings(DEFAULT_SETTINGS.whitelist);
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'blacklist')) {
+      updated.blacklist = Array.isArray(changes.blacklist.newValue)
+        ? cloneSettings(changes.blacklist.newValue)
+        : cloneSettings(DEFAULT_SETTINGS.blacklist);
+    }
+    if (Object.prototype.hasOwnProperty.call(changes, 'resistance')) {
+      updated.resistance = sanitizeResistanceConfig(changes.resistance.newValue);
+    }
+    applySettings(updated);
+  });
+
+  window.addEventListener('wheel', handleWheel, { passive: false });
+}
+
+init();
diff --git a/extension/manifest.json b/extension/manifest.json
new file mode 100644
index 0000000000000000000000000000000000000000..e2e351fc7adc5afc2b4b9916f7a90f87bebd189f
--- /dev/null
+++ b/extension/manifest.json
@@ -0,0 +1,28 @@
+{
+  "manifest_version": 3,
+  "name": "Scroll Resistance Trainer",
+  "version": "0.1.0",
+  "description": "Increase scroll resistance the longer you stay on distracting sites.",
+  "permissions": [
+    "storage",
+    "tabs"
+  ],
+  "host_permissions": [
+    "<all_urls>"
+  ],
+  "background": {
+    "service_worker": "background.js"
+  },
+  "action": {
+    "default_title": "Scroll Resistance Trainer",
+    "default_popup": "popup.html"
+  },
+  "options_page": "options.html",
+  "content_scripts": [
+    {
+      "matches": ["<all_urls>"],
+      "js": ["content.js"],
+      "run_at": "document_start"
+    }
+  ]
+}
diff --git a/extension/options.css b/extension/options.css
new file mode 100644
index 0000000000000000000000000000000000000000..73ec360f43b5384d955ae0f1ac14025c55e7d9d1
--- /dev/null
+++ b/extension/options.css
@@ -0,0 +1,127 @@
+body {
+  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
+  background: #0d1018;
+  color: #f5f7ff;
+  margin: 0;
+  padding: 2rem;
+}
+
+main {
+  max-width: 640px;
+  margin: 0 auto;
+  display: flex;
+  flex-direction: column;
+  gap: 2rem;
+}
+
+h1 {
+  margin: 0;
+  font-size: 1.8rem;
+}
+
+h2 {
+  font-size: 1.2rem;
+  margin-bottom: 0.75rem;
+}
+
+section {
+  background: rgba(23, 30, 46, 0.9);
+  padding: 1.5rem;
+  border-radius: 12px;
+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
+}
+
+label {
+  display: block;
+  margin-bottom: 0.5rem;
+  line-height: 1.4;
+}
+
+input[type='text'],
+input[type='number'] {
+  width: 100%;
+  margin-top: 0.35rem;
+  padding: 0.5rem;
+  border-radius: 6px;
+  border: 1px solid rgba(255, 255, 255, 0.1);
+  background: rgba(10, 14, 22, 0.8);
+  color: inherit;
+}
+
+form {
+  display: flex;
+  gap: 0.5rem;
+  margin-bottom: 1rem;
+}
+
+form button,
+button {
+  background: #2b8a3e;
+  color: #fff;
+  border: none;
+  border-radius: 6px;
+  padding: 0.6rem 1rem;
+  cursor: pointer;
+  transition: background 0.2s ease;
+}
+
+button.secondary {
+  background: #22304a;
+}
+
+button:hover {
+  background: #237233;
+}
+
+button.secondary:hover {
+  background: #1a2638;
+}
+
+.site-list {
+  list-style: none;
+  padding: 0;
+  margin: 0;
+  display: flex;
+  flex-direction: column;
+  gap: 0.5rem;
+}
+
+.site-list li {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  background: rgba(12, 16, 26, 0.8);
+  padding: 0.6rem 0.75rem;
+  border-radius: 6px;
+}
+
+.site-list li.empty {
+  justify-content: center;
+  color: rgba(245, 247, 255, 0.6);
+}
+
+.site-list button {
+  background: #b91c1c;
+}
+
+.site-list button:hover {
+  background: #991b1b;
+}
+
+.resistance-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  gap: 1rem;
+}
+
+.resistance-actions {
+  display: flex;
+  gap: 0.75rem;
+  margin-top: 1rem;
+}
+
+.status {
+  margin-top: 0.75rem;
+  min-height: 1.25rem;
+  color: #8fd19e;
+}
diff --git a/extension/options.html b/extension/options.html
new file mode 100644
index 0000000000000000000000000000000000000000..80edb0a82c593d2858752c6b7ab2d4c112723b37
--- /dev/null
+++ b/extension/options.html
@@ -0,0 +1,66 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Scroll Resistance Settings</title>
+    <link rel="stylesheet" href="options.css" />
+  </head>
+  <body>
+    <main>
+      <h1>Scroll Resistance</h1>
+      <section>
+        <h2>Mode</h2>
+        <label>
+          <input type="radio" name="mode" value="whitelist" />
+          Whitelist mode (resistance everywhere except allowed sites)
+        </label>
+        <label>
+          <input type="radio" name="mode" value="blacklist" />
+          Blacklist mode (resistance only on selected sites)
+        </label>
+      </section>
+
+      <section>
+        <h2>Whitelist</h2>
+        <form id="whitelist-form">
+          <input type="text" id="whitelist-input" placeholder="example.com" />
+          <button type="submit">Add</button>
+        </form>
+        <ul id="whitelist-list" class="site-list"></ul>
+      </section>
+
+      <section>
+        <h2>Blacklist</h2>
+        <form id="blacklist-form">
+          <input type="text" id="blacklist-input" placeholder="example.com" />
+          <button type="submit">Add</button>
+        </form>
+        <ul id="blacklist-list" class="site-list"></ul>
+      </section>
+
+      <section>
+        <h2>Resistance settings</h2>
+        <div class="resistance-grid">
+          <label>
+            Starting resistance multiplier
+            <input type="number" id="base-multiplier" step="0.1" min="1" />
+          </label>
+          <label>
+            Maximum resistance multiplier
+            <input type="number" id="max-multiplier" step="0.5" min="1" />
+          </label>
+          <label>
+            Distance to max resistance (meters)
+            <input type="number" id="meters-to-max" step="0.5" min="0.1" />
+          </label>
+        </div>
+        <div class="resistance-actions">
+          <button id="save-resistance">Save resistance</button>
+          <button id="reset-resistance" class="secondary">Reset defaults</button>
+        </div>
+        <p id="resistance-status" class="status"></p>
+      </section>
+    </main>
+    <script src="options.js" defer></script>
+  </body>
+</html>
diff --git a/extension/options.js b/extension/options.js
new file mode 100644
index 0000000000000000000000000000000000000000..56c827794131207a668f61eaaf07e439cc983730
--- /dev/null
+++ b/extension/options.js
@@ -0,0 +1,204 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+const modeInputs = document.querySelectorAll('input[name="mode"]');
+const whitelistForm = document.getElementById('whitelist-form');
+const whitelistInput = document.getElementById('whitelist-input');
+const whitelistList = document.getElementById('whitelist-list');
+const blacklistForm = document.getElementById('blacklist-form');
+const blacklistInput = document.getElementById('blacklist-input');
+const blacklistList = document.getElementById('blacklist-list');
+const baseMultiplierInput = document.getElementById('base-multiplier');
+const maxMultiplierInput = document.getElementById('max-multiplier');
+const metersToMaxInput = document.getElementById('meters-to-max');
+const saveResistanceButton = document.getElementById('save-resistance');
+const resetResistanceButton = document.getElementById('reset-resistance');
+const resistanceStatus = document.getElementById('resistance-status');
+
+let currentSettings = cloneDefaults(DEFAULT_SETTINGS);
+
+function cloneDefaults(value) {
+  return JSON.parse(JSON.stringify(value));
+}
+
+function normalizeHost(value) {
+  if (!value) {
+    return null;
+  }
+
+  let host = value.trim().toLowerCase();
+  if (!host) {
+    return null;
+  }
+
+  if (!host.includes('://')) {
+    host = `https://${host}`;
+  }
+
+  try {
+    return new URL(host).hostname;
+  } catch (error) {
+    return null;
+  }
+}
+
+function renderMode() {
+  modeInputs.forEach((input) => {
+    input.checked = input.value === currentSettings.mode;
+  });
+}
+
+function renderList(listElement, sites, type) {
+  listElement.textContent = '';
+  if (!Array.isArray(sites) || sites.length === 0) {
+    const empty = document.createElement('li');
+    empty.className = 'empty';
+    empty.textContent = 'No sites yet.';
+    listElement.appendChild(empty);
+    return;
+  }
+
+  sites
+    .slice()
+    .sort((a, b) => a.localeCompare(b))
+    .forEach((host) => {
+      const li = document.createElement('li');
+      li.textContent = host;
+      const button = document.createElement('button');
+      button.type = 'button';
+      button.textContent = 'Remove';
+      button.addEventListener('click', () => removeHost(type, host));
+      li.appendChild(button);
+      listElement.appendChild(li);
+    });
+}
+
+function renderResistance() {
+  const { baseMultiplier, maxMultiplier, metersToMax } = currentSettings.resistance;
+  baseMultiplierInput.value = baseMultiplier;
+  maxMultiplierInput.value = maxMultiplier;
+  metersToMaxInput.value = metersToMax;
+}
+
+function saveSettings(partial) {
+  chrome.storage.sync.set(partial, () => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to save settings', chrome.runtime.lastError);
+    }
+  });
+}
+
+function removeHost(type, host) {
+  const list = currentSettings[type];
+  const index = list.indexOf(host);
+  if (index >= 0) {
+    list.splice(index, 1);
+    renderList(type === 'whitelist' ? whitelistList : blacklistList, list, type);
+    saveSettings({ [type]: list });
+  }
+}
+
+function handleListSubmit(event, type) {
+  event.preventDefault();
+  const input = type === 'whitelist' ? whitelistInput : blacklistInput;
+  const host = normalizeHost(input.value);
+  if (!host) {
+    input.value = '';
+    return;
+  }
+
+  const list = currentSettings[type];
+  if (!list.includes(host)) {
+    list.push(host);
+    renderList(type === 'whitelist' ? whitelistList : blacklistList, list, type);
+    saveSettings({ [type]: list });
+  }
+
+  input.value = '';
+}
+
+function handleModeChange(event) {
+  const { value } = event.target;
+  if (value === 'whitelist' || value === 'blacklist') {
+    currentSettings.mode = value;
+    saveSettings({ mode: value });
+  }
+}
+
+function handleSaveResistance() {
+  const base = Number.parseFloat(baseMultiplierInput.value);
+  const max = Number.parseFloat(maxMultiplierInput.value);
+  const metersToMax = Number.parseFloat(metersToMaxInput.value);
+
+  const resistance = {
+    baseMultiplier: Number.isFinite(base) && base >= 1 ? base : DEFAULT_SETTINGS.resistance.baseMultiplier,
+    maxMultiplier: Number.isFinite(max) && max >= 1 ? max : DEFAULT_SETTINGS.resistance.maxMultiplier,
+    metersToMax:
+      Number.isFinite(metersToMax) && metersToMax > 0 ? metersToMax : DEFAULT_SETTINGS.resistance.metersToMax
+  };
+
+  if (resistance.maxMultiplier < resistance.baseMultiplier) {
+    resistance.maxMultiplier = resistance.baseMultiplier;
+  }
+
+  currentSettings.resistance = resistance;
+  saveSettings({ resistance });
+  resistanceStatus.textContent = 'Resistance settings saved.';
+  setTimeout(() => {
+    resistanceStatus.textContent = '';
+  }, 2000);
+}
+
+function handleResetResistance() {
+  currentSettings.resistance = cloneDefaults(DEFAULT_SETTINGS.resistance);
+  renderResistance();
+  saveSettings({ resistance: currentSettings.resistance });
+  resistanceStatus.textContent = 'Defaults restored.';
+  setTimeout(() => {
+    resistanceStatus.textContent = '';
+  }, 2000);
+}
+
+function hydrate() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to load settings', chrome.runtime.lastError);
+      return;
+    }
+
+    currentSettings = {
+      mode: items.mode ?? DEFAULT_SETTINGS.mode,
+      whitelist: Array.isArray(items.whitelist) ? items.whitelist.slice() : cloneDefaults(DEFAULT_SETTINGS.whitelist),
+      blacklist: Array.isArray(items.blacklist) ? items.blacklist.slice() : cloneDefaults(DEFAULT_SETTINGS.blacklist),
+      resistance: {
+        baseMultiplier: items.resistance?.baseMultiplier ?? DEFAULT_SETTINGS.resistance.baseMultiplier,
+        maxMultiplier: items.resistance?.maxMultiplier ?? DEFAULT_SETTINGS.resistance.maxMultiplier,
+        metersToMax: items.resistance?.metersToMax ?? DEFAULT_SETTINGS.resistance.metersToMax
+      }
+    };
+
+    renderMode();
+    renderList(whitelistList, currentSettings.whitelist, 'whitelist');
+    renderList(blacklistList, currentSettings.blacklist, 'blacklist');
+    renderResistance();
+  });
+}
+
+function init() {
+  hydrate();
+  whitelistForm.addEventListener('submit', (event) => handleListSubmit(event, 'whitelist'));
+  blacklistForm.addEventListener('submit', (event) => handleListSubmit(event, 'blacklist'));
+  modeInputs.forEach((input) => input.addEventListener('change', handleModeChange));
+  saveResistanceButton.addEventListener('click', handleSaveResistance);
+  resetResistanceButton.addEventListener('click', handleResetResistance);
+}
+
+document.addEventListener('DOMContentLoaded', init);
diff --git a/extension/popup.css b/extension/popup.css
new file mode 100644
index 0000000000000000000000000000000000000000..b2fce638ba622e4045fa11ae50c6a8e956ada915
--- /dev/null
+++ b/extension/popup.css
@@ -0,0 +1,73 @@
+body {
+  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
+  margin: 0;
+  padding: 0.75rem;
+  background: #10131a;
+  color: #f5f7ff;
+  min-width: 220px;
+}
+
+main {
+  display: flex;
+  flex-direction: column;
+  gap: 0.75rem;
+}
+
+button {
+  background: #2b8a3e;
+  color: #fff;
+  border: none;
+  border-radius: 6px;
+  padding: 0.5rem;
+  font-size: 0.95rem;
+  cursor: pointer;
+  transition: background 0.2s ease;
+}
+
+button:hover {
+  background: #237233;
+}
+
+button.secondary {
+  background: #22304a;
+}
+
+button.secondary:hover {
+  background: #1a2638;
+}
+
+.mode {
+  display: flex;
+  gap: 0.5rem;
+}
+
+.mode button {
+  flex: 1;
+}
+
+.mode button.active {
+  background: #0d6efd;
+}
+
+.status p {
+  margin: 0 0 0.5rem;
+  font-size: 0.9rem;
+}
+
+#toggle-site[disabled] {
+  opacity: 0.6;
+  cursor: default;
+}
+
+.actions {
+  display: flex;
+  justify-content: flex-end;
+}
+
+#open-settings {
+  background: #22304a;
+}
+
+#open-settings:hover {
+  background: #1a2638;
+}
diff --git a/extension/popup.html b/extension/popup.html
new file mode 100644
index 0000000000000000000000000000000000000000..104552a8bbe4a1f22572e41a7dd03387a2d5025f
--- /dev/null
+++ b/extension/popup.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Scroll Resistance</title>
+    <link rel="stylesheet" href="popup.css" />
+  </head>
+  <body>
+    <main>
+      <section class="mode">
+        <button id="whitelist-mode" data-mode="whitelist">Whitelist Mode</button>
+        <button id="blacklist-mode" data-mode="blacklist">Blacklist Mode</button>
+      </section>
+      <section class="status">
+        <p id="site-message">Loading...</p>
+        <button id="toggle-site" disabled>Add this site</button>
+      </section>
+      <section class="actions">
+        <button id="open-settings">Settings</button>
+      </section>
+    </main>
+    <script src="popup.js" defer></script>
+  </body>
+</html>
diff --git a/extension/popup.js b/extension/popup.js
new file mode 100644
index 0000000000000000000000000000000000000000..460859f3eac4b0b13f4fc19d28ed113419ed2f3c
--- /dev/null
+++ b/extension/popup.js
@@ -0,0 +1,135 @@
+const DEFAULT_SETTINGS = {
+  mode: 'whitelist',
+  whitelist: [],
+  blacklist: [],
+  resistance: {
+    baseMultiplier: 1,
+    maxMultiplier: 12,
+    metersToMax: 8
+  }
+};
+
+const whitelistButton = document.getElementById('whitelist-mode');
+const blacklistButton = document.getElementById('blacklist-mode');
+const toggleSiteButton = document.getElementById('toggle-site');
+const siteMessage = document.getElementById('site-message');
+const settingsButton = document.getElementById('open-settings');
+
+let currentMode = DEFAULT_SETTINGS.mode;
+let whitelist = [...DEFAULT_SETTINGS.whitelist];
+let blacklist = [...DEFAULT_SETTINGS.blacklist];
+let currentHost = null;
+
+function normalizeHostFromUrl(url) {
+  try {
+    const { hostname } = new URL(url);
+    return hostname ? hostname.toLowerCase() : null;
+  } catch (error) {
+    return null;
+  }
+}
+
+function updateModeButtons() {
+  if (currentMode === 'whitelist') {
+    whitelistButton.classList.add('active');
+    blacklistButton.classList.remove('active');
+  } else {
+    blacklistButton.classList.add('active');
+    whitelistButton.classList.remove('active');
+  }
+}
+
+function updateSiteMessage() {
+  if (!currentHost) {
+    siteMessage.textContent = 'This page cannot be managed.';
+    toggleSiteButton.disabled = true;
+    return;
+  }
+
+  if (currentMode === 'whitelist') {
+    const isWhitelisted = whitelist.includes(currentHost);
+    siteMessage.textContent = isWhitelisted
+      ? `${currentHost} is whitelisted.`
+      : `${currentHost} will have resistance.`;
+    toggleSiteButton.textContent = isWhitelisted ? 'Already whitelisted' : 'Whitelist this site';
+    toggleSiteButton.disabled = isWhitelisted;
+  } else {
+    const isBlacklisted = blacklist.includes(currentHost);
+    siteMessage.textContent = isBlacklisted
+      ? `${currentHost} will face resistance.`
+      : `${currentHost} is unaffected.`;
+    toggleSiteButton.textContent = isBlacklisted ? 'Already blacklisted' : 'Blacklist this site';
+    toggleSiteButton.disabled = isBlacklisted;
+  }
+}
+
+function loadSettings() {
+  chrome.storage.sync.get(null, (items) => {
+    if (chrome.runtime.lastError) {
+      console.error('Failed to load settings', chrome.runtime.lastError);
+      siteMessage.textContent = 'Unable to load settings.';
+      return;
+    }
+
+    currentMode = items.mode ?? DEFAULT_SETTINGS.mode;
+    whitelist = Array.isArray(items.whitelist) ? items.whitelist : [...DEFAULT_SETTINGS.whitelist];
+    blacklist = Array.isArray(items.blacklist) ? items.blacklist : [...DEFAULT_SETTINGS.blacklist];
+
+    updateModeButtons();
+    updateSiteMessage();
+  });
+}
+
+function setMode(mode) {
+  if (mode === currentMode) {
+    return;
+  }
+
+  currentMode = mode;
+  updateModeButtons();
+  updateSiteMessage();
+  chrome.storage.sync.set({ mode });
+}
+
+function addCurrentSite() {
+  if (!currentHost) {
+    return;
+  }
+
+  if (currentMode === 'whitelist') {
+    if (!whitelist.includes(currentHost)) {
+      const updated = [...whitelist, currentHost];
+      whitelist = updated;
+      chrome.storage.sync.set({ whitelist: updated }, () => {
+        updateSiteMessage();
+      });
+    }
+  } else {
+    if (!blacklist.includes(currentHost)) {
+      const updated = [...blacklist, currentHost];
+      blacklist = updated;
+      chrome.storage.sync.set({ blacklist: updated }, () => {
+        updateSiteMessage();
+      });
+    }
+  }
+}
+
+function init() {
+  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
+    const [activeTab] = tabs;
+    if (activeTab && activeTab.url) {
+      currentHost = normalizeHostFromUrl(activeTab.url);
+    }
+    loadSettings();
+  });
+
+  whitelistButton.addEventListener('click', () => setMode('whitelist'));
+  blacklistButton.addEventListener('click', () => setMode('blacklist'));
+  toggleSiteButton.addEventListener('click', addCurrentSite);
+  settingsButton.addEventListener('click', () => {
+    chrome.runtime.openOptionsPage();
+  });
+}
+
+document.addEventListener('DOMContentLoaded', init);
